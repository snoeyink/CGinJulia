bl_info = {
    "name": "Convex Hull Generation in Julia",
    "author": "Jackson Meade (NCSSM) and Jack Snoeyink (UNC Chapel Hill)",
    "version": (1, 0),
    "blender": (2, 80, 0),
    "location": "View3D > Add > Mesh > Generated_Convex_Hull",
    "description": "Creates a Blender 2.8 format file to allow viewing of the convex hull generated by CGinJulia",
    "warning": "Please make sure you are familiar with the CGinJulia package before using this",
    "wiki_url": "github.com/snoeyink/CGinJulia",
    "category": "Add Convex Hull",
}


import bpy
from bpy.types import Operator
from bpy.props import FloatVectorProperty
from bpy_extras.object_utils import AddObjectHelper, object_data_add
from mathutils import Vector


def add_object(self, context):
   scale_x = self.scale.x
   scale_y = self.scale.y

   verts = [
       Vector((19.168858366735538,47.33826532804967,18.950109759919332)),
       Vector((50.730849501229514,45.021242051255804,38.16786522026122)),
       Vector((33.958414601078566,33.443013042595204,51.41224751656735)),
       Vector((58.70650099468537,25.559756031143053,47.50441138735954)),
       Vector((23.419108857610684,57.802812416956606,2.468621951372265)),
       Vector((39.176696745124225,2.9734523756345244,14.555743908144475)),
       Vector((58.70650099468537,18.950109759919332,47.33826532804967)),
       Vector((23.419108857610684,38.16786522026122,45.021242051255804)),
       Vector((39.176696745124225,51.41224751656735,33.443013042595204)),
       Vector((11.431480309081227,19.168858366735538,18.950109759919332)),
       Vector((35.60471212068847,50.730849501229514,38.16786522026122)),
       Vector((41.86695352671714,33.958414601078566,51.41224751656735)),
       Vector((11.431480309081227,18.950109759919332,16.50832523966607)),
       Vector((35.60471212068847,38.16786522026122,26.401437989675077)),
       Vector((41.86695352671714,51.41224751656735,52.601245898266114)),
       Vector((56.49640538632953,58.70650099468537,47.50441138735954)),
       Vector((10.701981804719045,23.419108857610684,2.468621951372265)),
       Vector((42.389084527332045,39.176696745124225,14.555743908144475)),
       Vector((56.49640538632953,47.50441138735954,24.120103924195284)),
       Vector((10.701981804719045,2.468621951372265,0.7347410227589268)),
       Vector((42.389084527332045,14.555743908144475,37.596274103592236)),
       Vector((56.49640538632953,18.950109759919332,58.70650099468537)),
       Vector((10.701981804719045,38.16786522026122,23.419108857610684)),
       Vector((42.389084527332045,51.41224751656735,39.176696745124225)),
       Vector((56.49640538632953,16.50832523966607,18.950109759919332)),
       Vector((10.701981804719045,26.401437989675077,38.16786522026122)),
       Vector((42.389084527332045,52.601245898266114,51.41224751656735)),
       Vector((56.49640538632953,24.120103924195284,13.65165593995917)),
       Vector((10.701981804719045,0.7347410227589268,5.852585035050866)),
       Vector((42.389084527332045,37.596274103592236,52.9706739334434)),
       Vector((25.559756031143053,14.09027813581989,47.50441138735954)),
       Vector((57.802812416956606,38.24817662293657,2.468621951372265)),
       Vector((2.9734523756345244,4.331346169799528,14.555743908144475)),
       Vector((13.65165593995917,11.431480309081227,16.50832523966607)),
       Vector((5.852585035050866,35.60471212068847,26.401437989675077)),
       Vector((52.9706739334434,41.86695352671714,52.601245898266114)),
       Vector((47.50441138735954,58.70650099468537,25.559756031143053)),
       Vector((2.468621951372265,23.419108857610684,57.802812416956606)),
       Vector((14.555743908144475,39.176696745124225,2.9734523756345244)),
       Vector((47.50441138735954,14.09027813581989,7.619367761919005)),
       Vector((2.468621951372265,38.24817662293657,25.325898607138846)),
       Vector((14.555743908144475,4.331346169799528,12.068998097768265)),
       Vector((47.50441138735954,1.5646964270124197,24.120103924195284)),
       Vector((2.468621951372265,19.672949106009803,0.7347410227589268)),
       Vector((14.555743908144475,23.78344460132754,37.596274103592236)),
       Vector((14.09027813581989,25.559756031143053,1.5646964270124197)),
       Vector((38.24817662293657,57.802812416956606,19.672949106009803)),
       Vector((4.331346169799528,2.9734523756345244,23.78344460132754)),
       Vector((1.5646964270124197,19.168858366735538,11.431480309081227)),
       Vector((19.672949106009803,50.730849501229514,35.60471212068847)),
       Vector((23.78344460132754,33.958414601078566,41.86695352671714)),
       Vector((1.5646964270124197,11.431480309081227,13.65165593995917)),
       Vector((19.672949106009803,35.60471212068847,5.852585035050866)),
       Vector((23.78344460132754,41.86695352671714,52.9706739334434)),
       Vector((1.5646964270124197,25.559756031143053,19.168858366735538)),
       Vector((19.672949106009803,57.802812416956606,50.730849501229514)),
       Vector((23.78344460132754,2.9734523756345244,33.958414601078566)),
       Vector((1.5646964270124197,47.50441138735954,7.619367761919005)),
       Vector((19.672949106009803,2.468621951372265,25.325898607138846)),
       Vector((23.78344460132754,14.555743908144475,12.068998097768265)),
       Vector((16.50832523966607,11.431480309081227,18.950109759919332)),
       Vector((26.401437989675077,35.60471212068847,38.16786522026122)),
       Vector((52.601245898266114,41.86695352671714,51.41224751656735)),
       Vector((16.50832523966607,18.950109759919332,56.49640538632953)),
       Vector((26.401437989675077,38.16786522026122,10.701981804719045)),
       Vector((52.601245898266114,51.41224751656735,42.389084527332045)),
       Vector((7.619367761919005,14.09027813581989,1.5646964270124197)),
       Vector((25.325898607138846,38.24817662293657,19.672949106009803)),
       Vector((12.068998097768265,4.331346169799528,23.78344460132754)),
       Vector((24.120103924195284,1.5646964270124197,13.65165593995917)),
       Vector((0.7347410227589268,19.672949106009803,5.852585035050866)),
       Vector((37.596274103592236,23.78344460132754,52.9706739334434)),
   ]

edges = []
faces = []

    mesh = bpy.data.meshes.new(name="CGinJulia_PC_CH")
    mesh.from_pydata(verts, edges, faces)
    # useful for development when the mesh may be invalid.
    # mesh.validate(verbose=True)
    object_data_add(context, mesh, operator=self)

class OBJECT_OT_add_object(Operator, AddObjectHelper):
    #Generate the Mesh Object from points and constructed faces
    bl_idname = "mesh.add_object"
    bl_label = "Show Representation"
    bl_options = {'REGISTER', 'UNDO'}

    scale: FloatVectorProperty(
        name="scale",
        default=(1.0, 1.0, 1.0),
        subtype='TRANSLATION',
        description="scaling",
    )


    def execute(self, context):

        add_object(self, context)

        return {'FINISHED'}


# Registration

def add_object_button(self, context):
    self.layout.operator(
        OBJECT_OT_add_object.bl_idname,
        text="Import CGinJulia Representation",
        icon='SURFACE_NSPHERE')

# This allows you to right click on a button and link to the manual
def add_object_manual_map():
    url_manual_prefix = "https://docs.blender.org/manual/en/dev/"
    url_manual_mapping = (
        ("bpy.ops.mesh.add_object", "editors/3dview/object"),
    )
    return url_manual_prefix, url_manual_mapping

def register():
    bpy.utils.register_class(OBJECT_OT_add_object)
    bpy.utils.register_manual_map(add_object_manual_map)
    bpy.types.VIEW3D_MT_mesh_add.append(add_object_button)


def unregister():
    bpy.utils.unregister_class(OBJECT_OT_add_object)
    bpy.utils.unregister_manual_map(add_object_manual_map)
    bpy.types.VIEW3D_MT_mesh_add.remove(add_object_button)


if __name__ == "__main__":
    register()

