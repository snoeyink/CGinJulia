bl_info = {
    "name": "Convex Hull Generation in Julia",
    "author": "Jackson Meade (NCSSM) and Jack Snoeyink (UNC Chapel Hill)",
    "version": (1, 0),
    "blender": (2, 80, 0),
    "location": "View3D > Add > Mesh > Generated_Convex_Hull",
    "description": "Creates a Blender 2.8 format file to allow viewing of the convex hull generated by CGinJulia",
    "warning": "Please make sure you are familiar with the CGinJulia package before using this",
    "wiki_url": "github.com/snoeyink/CGinJulia",
    "category": "Add Convex Hull",
}


import bpy
from bpy.types import Operator
from bpy.props import FloatVectorProperty
from bpy_extras.object_utils import AddObjectHelper, object_data_add
from mathutils import Vector


def add_object(self, context):
   scale_x = self.scale.x
   scale_y = self.scale.y

   verts = [
       Vector((21.18453172326479,24.182094473218662,51.16980816676513)),
       Vector((49.03716064418744,38.08166115467304,55.15021888559877)),
       Vector((20.636599093469798,8.918815067852467,28.53435778258689)),
       Vector((21.18453172326479,4.5037188373357395,2.3868143399803055)),
       Vector((49.03716064418744,50.31086718452552,35.898408683863025)),
       Vector((20.636599093469798,39.68283754419807,18.14845915344128)),
       Vector((21.18453172326479,2.3868143399803055,16.682659008089193)),
       Vector((49.03716064418744,35.898408683863025,33.18779433762884)),
       Vector((20.636599093469798,18.14845915344128,5.776889068075923)),
       Vector((51.16980816676513,21.18453172326479,24.182094473218662)),
       Vector((55.15021888559877,49.03716064418744,38.08166115467304)),
       Vector((28.53435778258689,20.636599093469798,8.918815067852467)),
       Vector((51.16980816676513,38.29561901890479,48.834889480194434)),
       Vector((55.15021888559877,24.659634242979852,20.084071936313094)),
       Vector((28.53435778258689,1.376028313030635,6.054171578611638)),
       Vector((51.16980816676513,4.5037188373357395,21.18453172326479)),
       Vector((55.15021888559877,50.31086718452552,49.03716064418744)),
       Vector((28.53435778258689,39.68283754419807,20.636599093469798)),
       Vector((51.16980816676513,48.834889480194434,52.58556916479836)),
       Vector((55.15021888559877,20.084071936313094,33.50362964320734)),
       Vector((28.53435778258689,6.054171578611638,50.71633900014414)),
       Vector((24.182094473218662,38.29561901890479,51.16980816676513)),
       Vector((38.08166115467304,24.659634242979852,55.15021888559877)),
       Vector((8.918815067852467,1.376028313030635,28.53435778258689)),
       Vector((24.182094473218662,16.682659008089193,38.29561901890479)),
       Vector((38.08166115467304,33.18779433762884,24.659634242979852)),
       Vector((8.918815067852467,5.776889068075923,1.376028313030635)),
       Vector((5.926972076963151,36.447725199582415,26.035381966887762)),
       Vector((36.35438330758437,0.8040833358637345,5.842926906382138)),
       Vector((56.45554037854284,35.62667307245065,36.26662270559935)),
       Vector((5.926972076963151,15.937398308426891,2.3868143399803055)),
       Vector((36.35438330758437,5.422011050748079,35.898408683863025)),
       Vector((56.45554037854284,19.460609717093483,18.14845915344128)),
       Vector((5.926972076963151,2.3868143399803055,4.5037188373357395)),
       Vector((36.35438330758437,35.898408683863025,50.31086718452552)),
       Vector((56.45554037854284,18.14845915344128,39.68283754419807)),
       Vector((5.926972076963151,26.035381966887762,15.937398308426891)),
       Vector((36.35438330758437,5.842926906382138,5.422011050748079)),
       Vector((56.45554037854284,36.26662270559935,19.460609717093483)),
       Vector((36.447725199582415,5.926972076963151,52.58556916479836)),
       Vector((0.8040833358637345,36.35438330758437,33.50362964320734)),
       Vector((35.62667307245065,56.45554037854284,50.71633900014414)),
       Vector((36.447725199582415,43.642396854103424,20.3431758850428)),
       Vector((0.8040833358637345,2.405704765024801,1.402727707729774)),
       Vector((35.62667307245065,3.3310210721505173,4.905389228920813)),
       Vector((38.29561901890479,51.16980816676513,24.182094473218662)),
       Vector((24.659634242979852,55.15021888559877,38.08166115467304)),
       Vector((1.376028313030635,28.53435778258689,8.918815067852467)),
       Vector((15.937398308426891,36.447725199582415,20.3431758850428)),
       Vector((5.422011050748079,0.8040833358637345,1.402727707729774)),
       Vector((19.460609717093483,35.62667307245065,4.905389228920813)),
       Vector((15.937398308426891,2.3868143399803055,5.926972076963151)),
       Vector((5.422011050748079,35.898408683863025,36.35438330758437)),
       Vector((19.460609717093483,18.14845915344128,56.45554037854284)),
       Vector((15.937398308426891,12.524762225254866,2.3868143399803055)),
       Vector((5.422011050748079,13.302273576135573,35.898408683863025)),
       Vector((19.460609717093483,11.580867833447655,18.14845915344128)),
       Vector((15.937398308426891,26.035381966887762,36.447725199582415)),
       Vector((5.422011050748079,5.842926906382138,0.8040833358637345)),
       Vector((19.460609717093483,36.26662270559935,35.62667307245065)),
       Vector((20.3431758850428,36.447725199582415,43.642396854103424)),
       Vector((1.402727707729774,0.8040833358637345,2.405704765024801)),
       Vector((4.905389228920813,35.62667307245065,3.3310210721505173)),
       Vector((20.3431758850428,15.937398308426891,36.447725199582415)),
       Vector((1.402727707729774,5.422011050748079,0.8040833358637345)),
       Vector((4.905389228920813,19.460609717093483,35.62667307245065)),
       Vector((4.5037188373357395,5.926972076963151,2.3868143399803055)),
       Vector((50.31086718452552,36.35438330758437,35.898408683863025)),
       Vector((39.68283754419807,56.45554037854284,18.14845915344128)),
       Vector((4.5037188373357395,49.145916122538004,5.926972076963151)),
       Vector((50.31086718452552,54.846692815761806,36.35438330758437)),
       Vector((39.68283754419807,55.588427591576675,56.45554037854284)),
       Vector((43.642396854103424,38.29561901890479,20.3431758850428)),
       Vector((2.405704765024801,24.659634242979852,1.402727707729774)),
       Vector((3.3310210721505173,1.376028313030635,4.905389228920813)),
       Vector((43.642396854103424,48.834889480194434,38.29561901890479)),
       Vector((2.405704765024801,20.084071936313094,24.659634242979852)),
       Vector((3.3310210721505173,6.054171578611638,1.376028313030635)),
       Vector((48.834889480194434,38.29561901890479,43.642396854103424)),
       Vector((20.084071936313094,24.659634242979852,2.405704765024801)),
       Vector((6.054171578611638,1.376028313030635,3.3310210721505173)),
       Vector((48.834889480194434,43.642396854103424,52.58556916479836)),
       Vector((20.084071936313094,2.405704765024801,33.50362964320734)),
       Vector((6.054171578611638,3.3310210721505173,50.71633900014414)),
       Vector((48.834889480194434,52.58556916479836,51.16980816676513)),
       Vector((20.084071936313094,33.50362964320734,55.15021888559877)),
       Vector((6.054171578611638,50.71633900014414,28.53435778258689)),
       Vector((12.524762225254866,15.937398308426891,20.3431758850428)),
       Vector((13.302273576135573,5.422011050748079,1.402727707729774)),
       Vector((11.580867833447655,19.460609717093483,4.905389228920813)),
       Vector((12.524762225254866,20.3431758850428,2.3868143399803055)),
       Vector((13.302273576135573,1.402727707729774,35.898408683863025)),
       Vector((11.580867833447655,4.905389228920813,18.14845915344128)),
       Vector((12.524762225254866,2.3868143399803055,15.937398308426891)),
       Vector((13.302273576135573,35.898408683863025,5.422011050748079)),
       Vector((11.580867833447655,18.14845915344128,19.460609717093483)),
       Vector((52.58556916479836,43.642396854103424,36.447725199582415)),
       Vector((33.50362964320734,2.405704765024801,0.8040833358637345)),
       Vector((50.71633900014414,3.3310210721505173,35.62667307245065)),
       Vector((49.145916122538004,51.16980816676513,52.58556916479836)),
       Vector((54.846692815761806,55.15021888559877,33.50362964320734)),
       Vector((55.588427591576675,28.53435778258689,50.71633900014414)),
       Vector((49.145916122538004,5.926972076963151,4.5037188373357395)),
       Vector((54.846692815761806,36.35438330758437,50.31086718452552)),
       Vector((55.588427591576675,56.45554037854284,39.68283754419807)),
       Vector((16.682659008089193,24.182094473218662,21.18453172326479)),
       Vector((33.18779433762884,38.08166115467304,49.03716064418744)),
       Vector((5.776889068075923,8.918815067852467,20.636599093469798)),
       Vector((16.682659008089193,20.3431758850428,38.29561901890479)),
       Vector((33.18779433762884,1.402727707729774,24.659634242979852)),
       Vector((5.776889068075923,4.905389228920813,1.376028313030635)),
       Vector((26.035381966887762,36.447725199582415,15.937398308426891)),
       Vector((5.842926906382138,0.8040833358637345,5.422011050748079)),
       Vector((36.26662270559935,35.62667307245065,19.460609717093483)),
   ]

edges = []
faces = []

    mesh = bpy.data.meshes.new(name="CGinJulia_PC_CH")
    mesh.from_pydata(verts, edges, faces)
    # useful for development when the mesh may be invalid.
    # mesh.validate(verbose=True)
    object_data_add(context, mesh, operator=self)

class OBJECT_OT_add_object(Operator, AddObjectHelper):
    #Generate the Mesh Object from points and constructed faces
    bl_idname = "mesh.add_object"
    bl_label = "Show Representation"
    bl_options = {'REGISTER', 'UNDO'}

    scale: FloatVectorProperty(
        name="scale",
        default=(1.0, 1.0, 1.0),
        subtype='TRANSLATION',
        description="scaling",
    )


    def execute(self, context):

        add_object(self, context)

        return {'FINISHED'}


# Registration

def add_object_button(self, context):
    self.layout.operator(
        OBJECT_OT_add_object.bl_idname,
        text="Import CGinJulia Representation",
        icon='SURFACE_NSPHERE')

# This allows you to right click on a button and link to the manual
def add_object_manual_map():
    url_manual_prefix = "https://docs.blender.org/manual/en/dev/"
    url_manual_mapping = (
        ("bpy.ops.mesh.add_object", "editors/3dview/object"),
    )
    return url_manual_prefix, url_manual_mapping

def register():
    bpy.utils.register_class(OBJECT_OT_add_object)
    bpy.utils.register_manual_map(add_object_manual_map)
    bpy.types.VIEW3D_MT_mesh_add.append(add_object_button)


def unregister():
    bpy.utils.unregister_class(OBJECT_OT_add_object)
    bpy.utils.unregister_manual_map(add_object_manual_map)
    bpy.types.VIEW3D_MT_mesh_add.remove(add_object_button)


if __name__ == "__main__":
    register()

