bl_info = {
    "name": "Convex Hull Generation in Julia",
    "author": "Jackson Meade (NCSSM) and Jack Snoeyink (UNC Chapel Hill)",
    "version": (1, 0),
    "blender": (2, 80, 0),
    "location": "View3D > Add > Mesh > Generated_Convex_Hull",
    "description": "Creates a Blender 2.8 format file to allow viewing of the convex hull generated by CGinJulia",
    "warning": "Please make sure you are familiar with the CGinJulia package before using this",
    "wiki_url": "github.com/snoeyink/CGinJulia",
    "category": "Add Convex Hull",
}


import bpy
from bpy.types import Operator
from bpy.props import FloatVectorProperty
from bpy_extras.object_utils import AddObjectHelper, object_data_add
from mathutils import Vector


def add_object(self, context):
   scale_x = self.scale.x
   scale_y = self.scale.y

   verts = [
       Vector((1.946147651040926,31.626883616090772,17.061651821440734)),
       Vector((0.22771029936484055,48.928761540468535,57.28554141025175)),
       Vector((12.416467850231307,6.9982888664736365,30.47608794894369)),
       Vector((52.67016389549169,43.26101660755965,17.061651821440734)),
       Vector((35.670848398412964,33.924253952109204,57.28554141025175)),
       Vector((50.664961363993946,58.65571226542495,30.47608794894369)),
       Vector((17.061651821440734,31.626883616090772,34.05196597156142)),
       Vector((57.28554141025175,48.928761540468535,49.35952384748147)),
       Vector((30.47608794894369,6.9982888664736365,28.200232659237233)),
       Vector((29.760508302910374,1.946147651040926,2.0203614074455745)),
       Vector((2.9563251512476674,0.22771029936484055,2.095910563713459)),
       Vector((45.84049112782216,12.416467850231307,41.69482228081086)),
       Vector((29.760508302910374,2.0203614074455745,17.676280064135)),
       Vector((2.9563251512476674,2.095910563713459,9.321980614758347)),
       Vector((45.84049112782216,41.69482228081086,51.34285606701892)),
       Vector((29.760508302910374,17.676280064135,45.47017748250538)),
       Vector((2.9563251512476674,9.321980614758347,11.232784717116274)),
       Vector((45.84049112782216,51.34285606701892,52.91455885666608)),
       Vector((29.760508302910374,59.32457089208211,30.614637392888696)),
       Vector((2.9563251512476674,16.041437771154634,2.911566810076014)),
       Vector((45.84049112782216,5.058507579852738,19.812884863192895)),
       Vector((2.0203614074455745,17.676280064135,29.760508302910374)),
       Vector((2.095910563713459,9.321980614758347,2.9563251512476674)),
       Vector((41.69482228081086,51.34285606701892,45.84049112782216)),
       Vector((17.676280064135,43.26101660755965,45.47017748250538)),
       Vector((9.321980614758347,33.924253952109204,11.232784717116274)),
       Vector((51.34285606701892,58.65571226542495,52.91455885666608)),
       Vector((34.05196597156142,52.67016389549169,17.061651821440734)),
       Vector((49.35952384748147,35.670848398412964,57.28554141025175)),
       Vector((28.200232659237233,50.664961363993946,30.47608794894369)),
       Vector((34.05196597156142,17.061651821440734,31.626883616090772)),
       Vector((49.35952384748147,57.28554141025175,48.928761540468535)),
       Vector((28.200232659237233,30.47608794894369,6.9982888664736365)),
       Vector((31.626883616090772,1.946147651040926,19.043916547224676)),
       Vector((48.928761540468535,0.22771029936484055,1.2258621577443218)),
       Vector((6.9982888664736365,12.416467850231307,7.995167295776291)),
       Vector((31.626883616090772,52.67016389549169,34.05196597156142)),
       Vector((48.928761540468535,35.670848398412964,49.35952384748147)),
       Vector((6.9982888664736365,50.664961363993946,28.200232659237233)),
       Vector((31.626883616090772,19.043916547224676,59.32457089208211)),
       Vector((48.928761540468535,1.2258621577443218,16.041437771154634)),
       Vector((6.9982888664736365,7.995167295776291,5.058507579852738)),
       Vector((31.626883616090772,59.32457089208211,52.67016389549169)),
       Vector((48.928761540468535,16.041437771154634,35.670848398412964)),
       Vector((6.9982888664736365,5.058507579852738,50.664961363993946)),
       Vector((43.26101660755965,0.5147627560299606,17.061651821440734)),
       Vector((33.924253952109204,43.64308419094688,57.28554141025175)),
       Vector((58.65571226542495,53.99416463197278,30.47608794894369)),
       Vector((43.26101660755965,52.67016389549169,45.47017748250538)),
       Vector((33.924253952109204,35.670848398412964,11.232784717116274)),
       Vector((58.65571226542495,50.664961363993946,52.91455885666608)),
       Vector((43.26101660755965,17.061651821440734,52.67016389549169)),
       Vector((33.924253952109204,57.28554141025175,35.670848398412964)),
       Vector((58.65571226542495,30.47608794894369,50.664961363993946)),
       Vector((19.043916547224676,1.946147651040926,29.760508302910374)),
       Vector((1.2258621577443218,0.22771029936484055,2.9563251512476674)),
       Vector((7.995167295776291,12.416467850231307,45.84049112782216)),
       Vector((19.043916547224676,59.32457089208211,31.626883616090772)),
       Vector((1.2258621577443218,16.041437771154634,48.928761540468535)),
       Vector((7.995167295776291,5.058507579852738,6.9982888664736365)),
       Vector((59.32457089208211,19.043916547224676,30.614637392888696)),
       Vector((16.041437771154634,1.2258621577443218,2.911566810076014)),
       Vector((5.058507579852738,7.995167295776291,19.812884863192895)),
       Vector((45.47017748250538,52.67016389549169,59.32457089208211)),
       Vector((11.232784717116274,35.670848398412964,16.041437771154634)),
       Vector((52.91455885666608,50.664961363993946,5.058507579852738)),
       Vector((45.47017748250538,59.32457089208211,29.760508302910374)),
       Vector((11.232784717116274,16.041437771154634,2.9563251512476674)),
       Vector((52.91455885666608,5.058507579852738,45.84049112782216)),
       Vector((30.614637392888696,29.760508302910374,59.32457089208211)),
       Vector((2.911566810076014,2.9563251512476674,16.041437771154634)),
       Vector((19.812884863192895,45.84049112782216,5.058507579852738)),
       Vector((30.614637392888696,19.043916547224676,29.760508302910374)),
       Vector((2.911566810076014,1.2258621577443218,2.9563251512476674)),
       Vector((19.812884863192895,7.995167295776291,45.84049112782216)),
   ]

edges = []
faces = []

    mesh = bpy.data.meshes.new(name="CGinJulia_PC_CH")
    mesh.from_pydata(verts, edges, faces)
    # useful for development when the mesh may be invalid.
    # mesh.validate(verbose=True)
    object_data_add(context, mesh, operator=self)

class OBJECT_OT_add_object(Operator, AddObjectHelper):
    #Generate the Mesh Object from points and constructed faces
    bl_idname = "mesh.add_object"
    bl_label = "Show Representation"
    bl_options = {'REGISTER', 'UNDO'}

    scale: FloatVectorProperty(
        name="scale",
        default=(1.0, 1.0, 1.0),
        subtype='TRANSLATION',
        description="scaling",
    )


    def execute(self, context):

        add_object(self, context)

        return {'FINISHED'}


# Registration

def add_object_button(self, context):
    self.layout.operator(
        OBJECT_OT_add_object.bl_idname,
        text="Import CGinJulia Representation",
        icon='SURFACE_NSPHERE')

# This allows you to right click on a button and link to the manual
def add_object_manual_map():
    url_manual_prefix = "https://docs.blender.org/manual/en/dev/"
    url_manual_mapping = (
        ("bpy.ops.mesh.add_object", "editors/3dview/object"),
    )
    return url_manual_prefix, url_manual_mapping

def register():
    bpy.utils.register_class(OBJECT_OT_add_object)
    bpy.utils.register_manual_map(add_object_manual_map)
    bpy.types.VIEW3D_MT_mesh_add.append(add_object_button)


def unregister():
    bpy.utils.unregister_class(OBJECT_OT_add_object)
    bpy.utils.unregister_manual_map(add_object_manual_map)
    bpy.types.VIEW3D_MT_mesh_add.remove(add_object_button)


if __name__ == "__main__":
    register()

