bl_info = {
    "name": "Convex Hull Generation in Julia",
    "author": "Jackson Meade (NCSSM) and Jack Snoeyink (UNC Chapel Hill)",
    "version": (1, 0),
    "blender": (2, 80, 0),
    "location": "View3D > Add > Mesh > Generated_Convex_Hull",
    "description": "Creates a Blender 2.8 format file to allow viewing of the convex hull generated by CGinJulia",
    "warning": "Please make sure you are familiar with the CGinJulia package before using this",
    "wiki_url": "github.com/snoeyink/CGinJulia",
    "category": "Add Convex Hull",
}


import bpy
from bpy.types import Operator
from bpy.props import FloatVectorProperty
from bpy_extras.object_utils import AddObjectHelper, object_data_add
from mathutils import Vector


def add_object(self, context):
   scale_x = self.scale.x
   scale_y = self.scale.y

   verts = [
       Vector((51.51538776048867,46.00511997970363,17.03096570955089)),
       Vector((8.78798198279533,8.879302622062157,7.461813631331093)),
       Vector((52.35481348053472,14.374977088738067,23.365033284738132)),
       Vector((51.51538776048867,58.72794263616086,46.00511997970363)),
       Vector((8.78798198279533,17.353366924211336,8.879302622062157)),
       Vector((52.35481348053472,14.131741144846423,14.374977088738067)),
       Vector((51.51538776048867,17.03096570955089,18.58716322172168)),
       Vector((8.78798198279533,7.461813631331093,9.189962121294336)),
       Vector((52.35481348053472,23.365033284738132,57.98257981481471)),
       Vector((46.00511997970363,51.51538776048867,58.72794263616086)),
       Vector((8.879302622062157,8.78798198279533,17.353366924211336)),
       Vector((14.374977088738067,52.35481348053472,14.131741144846423)),
       Vector((46.00511997970363,34.528523872385776,17.03096570955089)),
       Vector((8.879302622062157,10.689530010214238,7.461813631331093)),
       Vector((14.374977088738067,13.436506657840376,23.365033284738132)),
       Vector((46.00511997970363,58.72794263616086,53.890009720770195)),
       Vector((8.879302622062157,17.353366924211336,39.75037327920559)),
       Vector((14.374977088738067,14.131741144846423,4.754631471840227)),
       Vector((46.00511997970363,41.30229627828012,34.528523872385776)),
       Vector((8.879302622062157,13.864652410680591,10.689530010214238)),
       Vector((14.374977088738067,11.996880723128251,13.436506657840376)),
       Vector((46.00511997970363,53.890009720770195,41.30229627828012)),
       Vector((8.879302622062157,39.75037327920559,13.864652410680591)),
       Vector((14.374977088738067,4.754631471840227,11.996880723128251)),
       Vector((27.181468247023393,50.335547404134815,12.151151263684925)),
       Vector((59.35706910606874,52.864809398726706,28.009829579860366)),
       Vector((15.899975173471121,36.57146013144739,43.59706618237445)),
       Vector((27.181468247023393,1.8550688498700207,53.890009720770195)),
       Vector((59.35706910606874,56.54584342455892,39.75037327920559)),
       Vector((15.899975173471121,3.4767246181367373,4.754631471840227)),
       Vector((34.528523872385776,46.00511997970363,41.30229627828012)),
       Vector((10.689530010214238,8.879302622062157,13.864652410680591)),
       Vector((13.436506657840376,14.374977088738067,11.996880723128251)),
       Vector((34.528523872385776,41.30229627828012,11.621246010719029)),
       Vector((10.689530010214238,13.864652410680591,25.91089761728057)),
       Vector((13.436506657840376,11.996880723128251,8.763921879217872)),
       Vector((58.72794263616086,51.51538776048867,58.27788717449072)),
       Vector((17.353366924211336,8.78798198279533,37.98886988784599)),
       Vector((14.131741144846423,52.35481348053472,57.91002175403892)),
       Vector((58.72794263616086,46.00511997970363,51.51538776048867)),
       Vector((17.353366924211336,8.879302622062157,8.78798198279533)),
       Vector((14.131741144846423,14.374977088738067,52.35481348053472)),
       Vector((41.30229627828012,11.621246010719029,34.528523872385776)),
       Vector((13.864652410680591,25.91089761728057,10.689530010214238)),
       Vector((11.996880723128251,8.763921879217872,13.436506657840376)),
       Vector((17.03096570955089,51.51538776048867,46.00511997970363)),
       Vector((7.461813631331093,8.78798198279533,8.879302622062157)),
       Vector((23.365033284738132,52.35481348053472,14.374977088738067)),
       Vector((17.03096570955089,46.00511997970363,34.528523872385776)),
       Vector((7.461813631331093,8.879302622062157,10.689530010214238)),
       Vector((23.365033284738132,14.374977088738067,13.436506657840376)),
       Vector((17.03096570955089,34.528523872385776,11.621246010719029)),
       Vector((7.461813631331093,10.689530010214238,25.91089761728057)),
       Vector((23.365033284738132,13.436506657840376,8.763921879217872)),
       Vector((17.03096570955089,11.621246010719029,5.180402634511161)),
       Vector((7.461813631331093,25.91089761728057,25.98607404119463)),
       Vector((23.365033284738132,8.763921879217872,15.735886288884394)),
       Vector((11.621246010719029,41.30229627828012,53.890009720770195)),
       Vector((25.91089761728057,13.864652410680591,39.75037327920559)),
       Vector((8.763921879217872,11.996880723128251,4.754631471840227)),
       Vector((11.621246010719029,53.890009720770195,1.8550688498700207)),
       Vector((25.91089761728057,39.75037327920559,56.54584342455892)),
       Vector((8.763921879217872,4.754631471840227,3.4767246181367373)),
       Vector((6.524899863153726,5.180402634511161,1.8550688498700207)),
       Vector((19.58654809961015,25.98607404119463,56.54584342455892)),
       Vector((39.72863579013741,15.735886288884394,3.4767246181367373)),
       Vector((6.524899863153726,15.327799531414485,5.180402634511161)),
       Vector((19.58654809961015,8.380025012454851,25.98607404119463)),
       Vector((39.72863579013741,30.99096707489884,15.735886288884394)),
       Vector((6.524899863153726,18.58716322172168,15.327799531414485)),
       Vector((19.58654809961015,9.189962121294336,8.380025012454851)),
       Vector((39.72863579013741,57.98257981481471,30.99096707489884)),
       Vector((12.151151263684925,18.58716322172168,6.524899863153726)),
       Vector((28.009829579860366,9.189962121294336,19.58654809961015)),
       Vector((43.59706618237445,57.98257981481471,39.72863579013741)),
       Vector((50.335547404134815,58.27788717449072,12.151151263684925)),
       Vector((52.864809398726706,37.98886988784599,28.009829579860366)),
       Vector((36.57146013144739,57.91002175403892,43.59706618237445)),
       Vector((53.890009720770195,46.00511997970363,58.72794263616086)),
       Vector((39.75037327920559,8.879302622062157,17.353366924211336)),
       Vector((4.754631471840227,14.374977088738067,14.131741144846423)),
       Vector((53.890009720770195,27.181468247023393,1.8550688498700207)),
       Vector((39.75037327920559,59.35706910606874,56.54584342455892)),
       Vector((4.754631471840227,15.899975173471121,3.4767246181367373)),
       Vector((53.890009720770195,1.8550688498700207,11.621246010719029)),
       Vector((39.75037327920559,56.54584342455892,25.91089761728057)),
       Vector((4.754631471840227,3.4767246181367373,8.763921879217872)),
       Vector((53.890009720770195,58.27788717449072,50.335547404134815)),
       Vector((39.75037327920559,37.98886988784599,52.864809398726706)),
       Vector((4.754631471840227,57.91002175403892,36.57146013144739)),
       Vector((15.327799531414485,17.03096570955089,5.180402634511161)),
       Vector((8.380025012454851,7.461813631331093,25.98607404119463)),
       Vector((30.99096707489884,23.365033284738132,15.735886288884394)),
       Vector((15.327799531414485,18.58716322172168,17.03096570955089)),
       Vector((8.380025012454851,9.189962121294336,7.461813631331093)),
       Vector((30.99096707489884,57.98257981481471,23.365033284738132)),
       Vector((1.8550688498700207,5.180402634511161,11.621246010719029)),
       Vector((56.54584342455892,25.98607404119463,25.91089761728057)),
       Vector((3.4767246181367373,15.735886288884394,8.763921879217872)),
       Vector((1.8550688498700207,11.621246010719029,53.890009720770195)),
       Vector((56.54584342455892,25.91089761728057,39.75037327920559)),
       Vector((3.4767246181367373,8.763921879217872,4.754631471840227)),
       Vector((1.8550688498700207,6.524899863153726,5.180402634511161)),
       Vector((56.54584342455892,19.58654809961015,25.98607404119463)),
       Vector((3.4767246181367373,39.72863579013741,15.735886288884394)),
       Vector((58.27788717449072,53.890009720770195,58.72794263616086)),
       Vector((37.98886988784599,39.75037327920559,17.353366924211336)),
       Vector((57.91002175403892,4.754631471840227,14.131741144846423)),
       Vector((18.58716322172168,6.524899863153726,12.151151263684925)),
       Vector((9.189962121294336,19.58654809961015,28.009829579860366)),
       Vector((57.98257981481471,39.72863579013741,43.59706618237445)),
   ]

edges = []
faces = []

    mesh = bpy.data.meshes.new(name="CGinJulia_PC_CH")
    mesh.from_pydata(verts, edges, faces)
    # useful for development when the mesh may be invalid.
    # mesh.validate(verbose=True)
    object_data_add(context, mesh, operator=self)

class OBJECT_OT_add_object(Operator, AddObjectHelper):
    #Generate the Mesh Object from points and constructed faces
    bl_idname = "mesh.add_object"
    bl_label = "Show Representation"
    bl_options = {'REGISTER', 'UNDO'}

    scale: FloatVectorProperty(
        name="scale",
        default=(1.0, 1.0, 1.0),
        subtype='TRANSLATION',
        description="scaling",
    )

    def execute(self, context):

        add_object(self, context)

        return {'FINISHED'}


# Registration

def add_object_button(self, context):
    self.layout.operator(
        OBJECT_OT_add_object.bl_idname,
        text="Import CGinJulia Representation",
        icon='SURFACE_NSPHERE')


# This allows you to right click on a button and link to the manual
def add_object_manual_map():
    url_manual_prefix = "https://docs.blender.org/manual/en/dev/"
    url_manual_mapping = (
        ("bpy.ops.mesh.add_object", "editors/3dview/object"),
    )
    return url_manual_prefix, url_manual_mapping


def register():
    bpy.utils.register_class(OBJECT_OT_add_object)
    bpy.utils.register_manual_map(add_object_manual_map)
    bpy.types.VIEW3D_MT_mesh_add.append(add_object_button)


def unregister():
    bpy.utils.unregister_class(OBJECT_OT_add_object)
    bpy.utils.unregister_manual_map(add_object_manual_map)
    bpy.types.VIEW3D_MT_mesh_add.remove(add_object_button)


if __name__ == "__main__":
    register()

